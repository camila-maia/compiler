#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = LexicalAnalyzer
ParserName = SyntaticAnalyzer
SemanticName = SemanticAnalyzer
Package = C:\Users\maicon\Desktop\Compilador\src\model\analyzers
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
A : @
U : _

InteiroSemExponencial: 0 | ([1-9]{D}*)

Exponencial: (e|E)  (\+ | \-)? ({D}{D}) {D}* 

Inteiro :  {InteiroSemExponencial}{Exponencial}?

Real: ( {InteiroSemExponencial}\.({D}*) {Exponencial}?  ) | ( (\.{D}+) {Exponencial}? )

ConstanteLiteral: (')  (([^"'"])* ('')* ([^"'"])*)*  (')

ComentarioLinha : [#] .*

ComentarioBloco: "/*" (  [^"*"] | [ \r  \n ]  |  (  "*" +  ( [ ^"*""/"]  |  [\r \n] ) ) )* "*" + "/"

Espacos : [\ \n \r \t]






#Tokens
id : ({L} | ( {L} | {A} ) ({L}{A}? | {D}{A}? | {L}{U}? | {D}{U}?)*  ( {L} | {D} ) ) 
constanteInteira : {Inteiro} 
constanteReal: {Real} 
constanteLiteral: {ConstanteLiteral}

//palavras chave
programa = id : "programa"
caracter = id : "caracter"
cadeia = id : "cadeia"
procedimento = id : "procedimento"
inicio = id : "inicio"
inteiro = id : "inteiro"
booleano = id : "booleano"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e" 
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de" 
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"
metodo = id : "metodo"
ref = id : "ref"
retorne = id : "retorne"
div = id : "div"
val = id : "val"

//s√≠mbolos especiais
";"
","
"."
"[" 
"]"
"<"
">"
"="
"("
")"
"+"
"-"
"*"
"/"
":"
":="
".."
"<="
"<>"
"{"
"}"
">="
"*"
"/"

//Coment√°rio n√£o fechado implicando em erro l√©xico
 :! {ComentarioBloco}

//Ignorar espa√ßos em branco e coment√°rios
 : {Espacos}*
 : {ComentarioLinha}


#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<tipo_metodo>
<par_formais>
<rep_par>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp> 
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar
 
<programa> ::= programa id #101 ";" <bloco> "." ; 
 
<bloco> ::= <dcl_var_const> <dcl_metodos>  <com_composto> ; 

<dcl_var_const> ::= <tipo> <dimensao> #102 <lid> #103 <fator_const> #104 ";" <dcl_var_const> | Ó ; 
 
<tipo> ::= inteiro #105 | real #106 | booleano #107 | caracter #108 | cadeia "[" <constante> #109 "]"; 

<dimensao> ::= #110 "[" <constante> "]" #179  | #111 Ó ; 
 
<lid> ::= id #112 <rep_lid> ; 
 
<rep_lid> ::= "," <lid> | Ó ; 
 
<fator_const>::= #113 "=" <constante> #180 | #114 Ó; 
 
<dcl_metodos> ::= <dcl_metodo> ";" <dcl_metodos>  | Ó ; 
 
<dcl_metodo> ::= metodo id #115 <par_formais> #116  <tipo_metodo> #117 ";" <bloco> #118 ; 
 
<par_formais> ::= "(" <mp_par> #119 <lid> #120 ":"  <tipo> #121 <rep_par> ")" | Ó ; 
 
<rep_par> ::= ";" <mp_par> #119 <lid> #120 ":"  <tipo> #121 <rep_par> | Ó ; 
 
<tipo_metodo> ::= ":" <tipo> #122 | Ó #123; 

<mp_par> ::= ref #124 | val #125 ; 

<com_composto>::= "{"<comando> <replistacomando>"}"; 

<replistacomando> ::= ";" <comando> <replistacomando> | Ó ; 
 
<comando> ::= id #126 <rcomid> | <com_composto> | se <expressao> #127 entao <comando> <senaoparte> | enquanto <expressao> #127 faca  <comando> | leia "(" #128 <lid> ")" | escreva "(" <expressao> #129 <rep_lexpr> ")" | retorne <expressao> #130 | Ó ; 
 
<senaoparte> ::= senao <comando> | Ó ;
 
<rcomid> ::= #131 ":=" <expressao> #132  | "[" #133 <expressao> #134 "]" ":=" <expressao> #132  | "(" #135 <expressao> #136 <rep_lexpr> ")" #137 | Ó #138 ; 
 
<rep_lexpr> ::= "," <expressao> #139 <rep_lexpr> | Ó ; 
 
<expressao> ::= <expsimp> #140 <resto_expressao> ; 
 
<resto_expressao> ::= <oprel> <expsimp> #141 | Ó ; 
 
<oprel> ::= "=" #142 | "<" #143 | ">" #144  | ">=" #145 | "<=" #146 | "<>" #147 ;  
 
<expsimp> ::= <termo> #148 <rep_expsimp> ; 
 
<rep_expsimp>::=<op_add> #149 <termo> #150 <rep_expsimp> | Ó; 

<op_add> ::= "+" #151 | "-" #152 | ou #153 ; 
 
<termo> ::= <fator> #154 <rep_termo> ; 
 
<rep_termo> ::= <op_mult> #155 <fator> #156 <rep_termo>  | Ó ;
 
<op_mult> ::= "*" #157 | "/" #158 | e #159 | div #160 ; 
 
<fator> ::= nao #161 <fator> #162 | "-" #163 <fator> #164 | "(" #165 <expressao> ")" #166 | id #126 <rvar> #167 | <constante_explicita> #168; 
 
<rvar>::= "(" #169 <expressao> #136 <rep_lexpr> ")" #170 | "[" #133 <expressao> #171 "]" | Ó #172 ; 
 
<constante> ::= id #173 | <constante_explicita> ; 

<constante_explicita>::= constanteInteira #174 | constanteReal #175 | falso #176 | verdadeiro #177 | constanteLiteral #178 ; 
  
