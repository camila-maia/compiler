#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = LexicalAnalyzer
ParserName = SyntacticAnalyzer
SemanticName = SemanticAnalyzer
Package = /media/2870F51170F4E70A/Camila/Sistemas/6\u00aa
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
L : [A-Za-z]
D : [0-9]
A : @
U : _

InteiroSemExponencial: 0 | ([1-9]{D}*)

Exponencial: (e|E)  (\+ | \-)? ({D}{D}) {D}* 

Inteiro :  {InteiroSemExponencial}{Exponencial}?

Real: ( {InteiroSemExponencial}\.({D}*) {Exponencial}?  ) | ( (\.{D}*) {Exponencial}? )

ConstanteLiteral: (')  (([^"'"])* ('')* ([^"'"])*)*  (')

ComentarioLinha : [#] .*

ComentarioBloco: "/*" (  [^"*"] | [ \r  \n ]  |  (  "*" +  ( [ ^"*""/"]  |  [\r \n] ) ) )* "*" + "/"

Espacos : [\ \n \r \t]









#Tokens
id : ({L} | ( {L} | {A} ) ({L}{A}? | {D}{A}? | {L}{U}? | {D}{U}?)*  ( {L} | {D} ) ) 
//comentarioLinha : {ComentarioLinha}
//comentarioBloco :! {ComentarioBloco}
constanteInteira : {Inteiro} 
constanteReal: {Real} 
constanteLiteral: {ConstanteLiteral}

//palavras chave
programa = id : "programa"
//var = id : "var"
caracter = id : "caracter"
cadeia = id : "cadeia"
procedimento = id : "procedimento"
inicio = id : "inicio"
inteiro = id : "inteiro"
booleano = id : "booleano"
funcao = id : "funcao"
se = id : "se"
entao = id : "entao"
senao = id : "senao"
leia = id : "leia"
escreva = id : "escreva"
ou = id : "ou"
e = id : "e" 
nao = id : "nao"
falso = id : "falso"
verdadeiro = id : "verdadeiro"
de = id : "de" 
faca = id : "faca"
real = id : "real"
vetor = id : "vetor"
enquanto = id : "enquanto"
metodo = id : "metodo"
ref = id : "ref"
retorne = id : "retorne"
div = id : "div"
val = id : "val"

//símbolos especiais
";"
","
"."
"[" 
"]"
"<"
">"
"="
"("
")"
"+"
"-"
"*"
"/"
":"
":="
".."
"<="
"<>"
"{"
"}"
">="
"*"
"/"

//Ignorar espaços em branco e comentários
 : {Espacos}
 : {ComentarioBloco}
 : {ComentarioLinha}

//Comentário não fechado implicando em erro léxico
 :! {ComentarioBloco}
#NonTerminals
<programa>
<bloco>
<dcl_var_const>
<tipo>
<dimensao>
<lid>
<rep_lid>
<fator_const>
<dcl_metodos>
<dcl_metodo>
<tipo_metodo>
<par_formais>
<rep_par>
<mp_par>
<com_composto>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<rep_lexpr>
<expressao>
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp> 
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante>
<constante_explicita>
#Grammar
<programa> ::= programa id ";" <bloco> "." ;
<bloco> ::= <dcl_var_const> <dcl_metodos> <com_composto> ;
<dcl_var_const> ::= <tipo> <dimensao> <lid> <fator_const> ";" <dcl_var_const>
| î;
<tipo> ::= inteiro | real | booleano | caracter | cadeia "[" <constante> "]";
<dimensao> ::= "[" <constante> "]" | î;
<lid> ::= id <rep_lid> ;
<rep_lid> ::= "," <lid> | î ;
<fator_const> ::= "=" <constante> | î;
<dcl_metodos> ::= <dcl_metodo> ";" <dcl_metodos> | î ;
<dcl_metodo> ::= metodo id <par_formais>
<tipo_metodo> ";" <bloco> ;
<par_formais> ::= "(" <mp_par> <lid> ":" <tipo> <rep_par> ")" | î ;
<rep_par> ::= ";" <mp_par> <lid> ":" <tipo> <rep_par> | î ;
<tipo_metodo> ::= ":" <tipo> | î ;
<mp_par> ::= ref | val ;
<com_composto> ::= "{" <comando> <replistacomando> "}" ;
<replistacomando> ::= ";" <comando> <replistacomando> | î ;
<comando> ::= id <rcomid>
| <com_composto>
| se <expressao> entao <comando> <senaoparte>
| enquanto <expressao> faca <comando>
| leia "(" <lid> ")"
| escreva "(" <expressao> <rep_lexpr> ")"
| retorne <expressao>
| î;
<senaoparte> ::= senao <comando> | î ;
<rcomid> ::= ":=" <expressao>
| "[" <expressao> "]" ":=" <expressao>
| "(" <expressao> <rep_lexpr> ")"
| î;
<rep_lexpr> ::= "," <expressao> <rep_lexpr> | î ;
<expressao> ::= <expsimp> <resto_expressao> ;
<resto_expressao> ::= <oprel> <expsimp> | î ;
<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;
<expsimp> ::= <termo> <rep_expsimp> ;
<rep_expsimp> ::= <op_add> <termo> <rep_expsimp> | î ;
<op_add> ::= "+" | "-" | ou ;
<termo> ::= <fator> <rep_termo> ;
<rep_termo> ::= <op_mult> <fator> <rep_termo> | î ;
<op_mult> ::= "*" | "/" | div | e ;
<fator> ::= nao <fator>
| "-" <fator>
| "(" <expressao> ")"
| id <rvar>
| <constante_explicita> ;
<rvar> ::= "(" <expressao> <rep_lexpr> ")"
| "[" <expressao> "]"
| î;
<constante> ::= id | <constante_explicita> ;
<constante_explicita>::= constanteInteira | constanteReal
| falso | verdadeiro | constanteLiteral ;



